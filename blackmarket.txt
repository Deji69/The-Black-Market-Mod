// ================================ Black Market Mod Source, by Deji (http://gtag.gtagaming.com) ================================
{$CLEO}
{$VERSION 3.0.1000}
{$I constants.inc}
{$I blackmarket.inc}

CONST
VERSION_LONG            = 0x00000001    // byte(major), byte(minor), byte(beta), byte(alpha)
END
VAR
    SVar:array 4 of SUPERVAR
END

SCRIPT_NAME "blackma"

IF NOT IS_GAME_VERSION_ORIGINAL
THEN
    PRINTSTRING "INCOMPATIBLE_GAME_USED"
    TERMINATE_THIS_SCRIPT
END

{********************************************}

SET_BIT_L 38@ 8
CALL @calloc 2 4 NUM_VARS GlobalVarIndex
CALL @calloc 2 4 NUM_SAVE_VARS SaveVar
TEMP_1 = @GLOBAL_VARIABLES_INDEX
0085: TEMP_1(TEMP_1,4s) = GlobalVarIndex
0085: gSaveDataPointer = SaveVar

{********************************************}

IF OPEN_FILE "CLEO\BlackMarket\drug_peds.dat" "rb" TEMP_1
THEN
    READ_FROM_FILE TEMP_1 4 TEMP_2
    ALLOCATE_MEMORY TEMP_2 TEMP_3
    READ_FROM_FILE TEMP_1 TEMP_2 TEMP_3(TEMP_3,4s)
    TEMP_2 /= PED_DRUG_ENTRY_SIZE
    TEMP_2 += PED_DRUG_ENTRY_SIZE
    0085: gNumPedDrugInfoEntries = TEMP_2
    0085: gPedDrugInfo = TEMP_3
    CLOSE_FILE TEMP_1
END

{********************************************}

// Inject our own stat page:
0A90: TEMP_2 = 0x12 * 8
0A8E: TEMP_1 = 0x8CE012 + TEMP_2
WRITE_MEMORY TEMP_1 1 0x15 FALSE
TEMP_1 += 1
STRING_FORMAT TEMP_1 "_BMMNM"
TEMP_1 += 8
0006: TEMP_1(TEMP_1,4s) = 0x3900000C
0006: TEMP_1(-1@,4s) = 0x01014A00
TEMP_1 += 7
WRITE_MEMORY TEMP_1 2 0x1 FALSE

// Not to mess up the "Back" button, though
0A90: TEMP_2 = 0x12 * 9
0A8E: TEMP_1 = 0x8CE012 + TEMP_2
WRITE_MEMORY TEMP_1 1 0x2 FALSE
TEMP_1 += 1
STRING_FORMAT TEMP_1 "FEDS_TB"
TEMP_1 += 8
0006: TEMP_1(TEMP_1,4s) = 0x40002A0B
0006: TEMP_1(-1@,4s) = 0x03017C01
TEMP_1 += 7
WRITE_MEMORY TEMP_1 2 0x3 FALSE

// Move entries up to make space for ours
WRITE_MEMORY 0x8CE020 2 0x5A FALSE

// Make it functional by increasing amount of stat struct arrays
WRITE_MEMORY 0x55A78F 1 8 TRUE
GET_LABEL_POINTER @_STATSWITCH TEMP_1
WRITE_MEMORY 0x55A796 4 TEMP_1 TRUE
TEMP_1 += 32
GET_LABEL_POINTER @_STATGETASM TEMP_2
0085: TEMP_1(TEMP_1,4s) = TEMP_2
TEMP_2 += 1
GET_LABEL_POINTER @_STATDATA TEMP_2(TEMP_2,4s)

{********************************************}

ADD_TEXT_LABEL "_BMMNM" "Black Market"
ADD_TEXT_LABEL "_BMMDB" "Made by Deji"
ADD_TEXT_LABEL "_BMWWW" "www.gtag.gtagaming.com/mods/99-the-black-market-mod/"
ADD_TEXT_LABEL "_FLOAT" "~1~.~1~"
ADD_TEXT_LABEL "_BMDQ0" "~1~x Weed"
ADD_TEXT_LABEL "_BMDQ1" "~1~x Coke"
ADD_TEXT_LABEL "_BMDQ2" "~1~x Heroin"
ADD_TEXT_LABEL "_BMDQ3" "~1~x Ecstasy"
ADD_TEXT_LABEL "_BMDQ4" "~1~x Steroids"
ADD_TEXT_LABEL "_BMDQ5" "~1~x Shrooms"
ADD_TEXT_LABEL "_BMTOT" "Total: $~1~"
ADD_TEXT_LABEL "_BMD1" "You want some stuff?"
ADD_TEXT_LABEL "_BMD1Y" "OK then."
ADD_TEXT_LABEL "_BMD1N" "Nah, get outta here."
ADD_TEXT_LABEL "_BMD2" "Take your pick."
ADD_TEXT_LABEL "_BMD3" "Maybe another time?"
ADD_TEXT_LABEL "_BMDRG" "Drugs"
ADD_TEXT_LABEL "_BMSTA" "Stats"
ADD_TEXT_LABEL "_BMSHD" "Stash"
ADD_TEXT_LABEL "_BMPKT" "Pocket"

{********************************************}

// Determine whether we're on a loaded game.
GET_INT_STAT 136 TEMP_1
IF TEMP_1 > 0
THEN
    // Get the load slot used and load the Black Market Save file.
    READ_MEMORY 0xBA68A7 1 0 TEMP_1
    CALL @System_Load 2 GlobalVarIndex TEMP_1
END

GET_THIS_SCRIPT_STRUCT gMasterProcPointer
0085: gCurrentProcPointer = gMasterProcPointer

0006: gDebugModeOn = 1

CALL @GenerateDrugPrices 0

WHILE TRUE
    003D:
    GET_LABEL_POINTER @STACK gStackPointer
    TEMP_1 = @CALL_LIST
    TEMP_2 = 0
    
    WHILE 8039:   NOT TEMP_1(TEMP_2,4s) == 0
        0085: TEMP_3 = TEMP_1(TEMP_2,4s)
        GET_LABEL_POINTER TEMP_3 gCurrentProcData
        READ_MEMORY gCurrentProcData 2 0 gNumProcVars
        GET_VAR_POINTER TEMP_3(TEMP_3,2s) TEMP_3
        WRITE_MEMORY TEMP_3 2 0x50 0
        
        USE_TEXT_COMMANDS FALSE
        CALL TEMP_1(TEMP_2,4s) 1 GlobalVarIndex
        TEMP_2 += 1
    END
    
    000A: gNumCycles += 1
END

:CALL_LIST
HEX
@Debug
@System
@Market
@DealerHook
@FIENDS
@End
00000000
END

:Debug
HEX
0200 01 @InitProc
END

STORE_DEBUG_COMMAND TEMP_1v
IF COMPARE_STRING_LS16 TEMP_1v "BMMDEBUG"
THEN
    CLEAR_DEBUG_COMMAND
    IF 0039:   gDebugModeOn == 0
    THEN
        0006: gDebugModeOn = 1
        PRINTSTRING "DEBUG_MODE_ENABLED"
    ELSE
        0006: gDebugModeOn = 0
        PRINTSTRING "DEBUG_MODE_DISABLED"
    END
ELSE
    IF 0039:   gDebugModeOn == 0
    THEN
        RET 0
    END
END

IF COMPARE_STRING_LS16 TEMP_1v "TICKME"
THEN
    CLEAR_DEBUG_COMMAND
    GET_VAR_POINTER gSaveDrugQtyBegin TEMP_2
    FOR TEMP_3 = MIN_DRUG TO MAX_DRUG
        000A: TEMP_2(TEMP_3,4s) += 1
    END
END

IF COMPARE_STRING_LS16 TEMP_1v "HANDMEAJEFFREY"
THEN
    CLEAR_DEBUG_COMMAND
    GET_VAR_POINTER gSaveDrugQtyBegin TEMP_2
    FOR TEMP_3 = MIN_DRUG TO MAX_DRUG
        GENERATE_RANDOM_INT_IN_RANGE -10 10 TEMP_4
        IF TEMP_4 < 0
        THEN
            TEMP_4 = 0
        END 
        0085: TEMP_2(TEMP_3,4s) = TEMP_4
    END
END

IF IS_KEYBOARD_KEY_JUST_PRESSED 0x51
THEN
    086A:
    PRINTINT2 "QTY_SHROOM" gSaveNumShroom
    PRINTINT2 "QTY_STEROID" gSaveNumSteroid
    PRINTINT2 "QTY_ECSTASY" gSaveNumEcstasy
    PRINTINT2 "QTY_HEROIN" gSaveNumHeroin
    PRINTINT2 "QTY_COKE" gSaveNumCoke
    PRINTINT2 "QTY_WEED" gSaveNumWeed
END

IF IS_KEYBOARD_KEY_JUST_PRESSED 0x50
THEN
    086A:
    CALL @GetDrugPrice 1 SHROOM TEMP_1
    PRINTINT2 "PRICE_SHROOM" TEMP_1
    CALL @GetDrugPrice 1 STEROID TEMP_1
    PRINTINT2 "PRICE_STEROID" TEMP_1
    CALL @GetDrugPrice 1 ECSTASY TEMP_1
    PRINTINT2 "PRICE_ECSTASY" TEMP_1
    CALL @GetDrugPrice 1 HEROIN TEMP_1
    PRINTINT2 "PRICE_HEROIN" TEMP_1
    CALL @GetDrugPrice 1 COKE TEMP_1
    PRINTINT2 "PRICE_COKE" TEMP_1
    CALL @GetDrugPrice 1 WEED TEMP_1
    PRINTINT2 "PRICE_WEED" TEMP_1
END

IF VAR_1 == 1
THEN
    IF 32@ > 500
    THEN
        0085: VAR_2 = gDebugEndTime
        0062: VAR_2 -= gDebugStartTime
        0093: VAR_2 = integer VAR_2 to_float
        VAR_2 /= 1000.0
        32@ = 0
    END
    SET_TEXT_COLOUR 0 180 0 255
    SET_TEXT_EDGE 1 RGBA 0 0 0 255
    DISPLAY_TEXT_WITH_FLOAT 5.0 5.0 "_FLOAT" VAR_2 2
ELSE
    VAR_1 = 1
END

READ_MEMORY 0xB610E0 4 0 gDebugStartTime

GET_NUMBER_OF_SCRIPT_INSTANCES_OF_STREAMED_SCRIPT SCRIPT_DEALER STORE_TO TEMP_1

IF TEMP_1 > 0
THEN
    GET_LABEL_POINTER @TempMemory TEMP_2
    STRING_FORMAT TEMP_2 "bmdeal"
    
    IF CALL @CTheScripts__GetNextActiveScriptNamed 2 1 TEMP_2 >> TEMP_1
    THEN
        WHILE TRUE
            CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_CHAR TEMP_3
            CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_MARKER TEMP_4
            
            IF TEMP_3 <= 0x8C00
            THEN
                IF NOT IS_CHAR_DEAD TEMP_3
                THEN
                    IF NOT DOES_BLIP_EXIST TEMP_4
                    THEN
                        ADD_BLIP_FOR_CHAR TEMP_3 STORE_TO TEMP_4
                        CHANGE_BLIP_COLOUR TEMP_4 0xFFFFFFFF
                        CHANGE_BLIP_SCALE TEMP_4 2
                        CALL @CRunningScript__SetVar 3 TEMP_1 DEALER_VAR_MARKER TO TEMP_4
                    END
                    IF IS_PLAYER_TARGETTING_CHAR 0 TEMP_3
                    THEN
                        GET_LABEL_POINTER @TempMemory TEMP_4
                        SET_TEXT_COLOUR 255 255 255 255
                        SET_TEXT_EDGE 1 0 0 0 255
                        STRING_FORMAT TEMP_4 "DEALER (0x%X)" TEMP_1
                        CALL @DisplayText 3 5.0 430.0 TEMP_4
                        
                        SET_TEXT_COLOUR 0 255 0 255
                        SET_TEXT_EDGE 1 0 0 0 255
                        SET_TEXT_SIZE 640.0
                        CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_MONEY >> TEMP_3
                        STRING_FORMAT TEMP_4 "Cash: $%d" TEMP_3
                        CALL @DisplayText 3 170.0 430.0 TEMP_4
                        
                        SET_TEXT_COLOUR 255 255 255 255
                        SET_TEXT_EDGE 1 0 0 0 255
                        SET_TEXT_SIZE 640.0
                        CALL @GetDealerScriptTotalDrugQuantity 1 TEMP_1 TEMP_3
                        STRING_FORMAT TEMP_4 "Drugs: %d" TEMP_3
                        CALL @DisplayText 3 280.0 430.0 TEMP_4
                    END
                ELSE
                    IF DOES_BLIP_EXIST TEMP_4
                    THEN REMOVE_BLIP TEMP_4
                    END
                END
            END
            
            CALL @CTheScripts__GetNextActiveScriptNamed 2 0 TEMP_2 >> TEMP_1
            ELSE_GOTO BREAK
        END
    END
END

GOSUB @EndProc
RET 0

:System
hex
0600 01 @InitProc
end

GET_INTERIOR_FROM_CHAR scplayer TEMP_1
IF NOT TEMP_1 == 0
THEN
    GET_CHAR_INTERIOR_NAME scplayer TEMP_2v
    IF NOT IS_STRING_NULL_LV TEMP_2v
    THEN
        BITWISE_AND TEMP_2 0xFFFF TEMP_1
        IF OR
            COMPARE_STRING_LS16 TEMP_2v "CARLS"
            TEMP_1 == 0x5653
        THEN
            GOSUB @System_SafeHouse
        END
    END
END

IF VAR_1 == 1
THEN
    READ_MEMORY 0xBA68A6 1 0 TEMP_1
    IF OR
        TEMP_1 == 18  // Save Complete Screen
        TEMP_1 == 19  // Save Complete Screen 2
    THEN
        READ_MEMORY 0xBA68A7 1 0 TEMP_1
        CALL @System_Save 2 GlobalVarIndex TEMP_1
    END
    VAR_1 = 0
END

READ_MEMORY 0xBA67A7 1 0 TEMP_1

IF TEMP_1 == 1
THEN VAR_1 = 1
END

GOSUB @EndProc
RET 0

:System_SafeHouse
IF AND
    IS_PLAYER_PLAYING player1
    IS_PLAYER_CONTROL_ON player1
THEN
    IF VAR_2 == 0
    THEN
        IF AND
            NOT IS_HELP_MESSAGE_BEING_DISPLAYED
            NOT IS_SCREEN_FADING
        THEN
            CALL @GetTotalSafeDrugQuantity 0 TEMP_1
            CALL @GetTotalDrugQuantity 0 TEMP_2
            IF TEMP_1 > 0
            THEN
                PRINT_HELP_STRING "Hold ~k~~PED_FIREWEAPON_ALT~ to access your drug stash."
            ELSE
                IF TEMP_2 > 0
                THEN
                    PRINT_HELP_STRING "This safehouse can be used to stash drugs (hold ~k~~PED_FIREWEAPON_ALT~)."
                END
            END
            VAR_2 = 1
        END
    END
END
IF NOT VAR_3 == 2
THEN
    IF AND
        IS_PLAYER_PLAYING player1
        IS_PLAYER_CONTROL_ON player1
    THEN
        IF $Phone_Ringing_Flag == 0
        THEN
            IF AND
                IS_BUTTON_PRESSED PAD1 LEFTSHOULDER1
                NOT IS_BUTTON_PRESSED PAD1 RIGHTSHOULDER1
            THEN
                IF NOT VAR_3 == 0
                THEN
                    GET_GAME_TIMER TEMP_1
                    0062: TEMP_1 -= VAR_4
                    IF TEMP_1 > 2000
                    THEN
                        SET_PLAYER_CONTROL player1 OFF
                        DISPLAY_RADAR FALSE
                        GOSUB @LoadScoreTextures
                        VAR_3 = 2
                    END
                ELSE
                    VAR_3 = 1
                    GET_GAME_TIMER VAR_4
                END
            ELSE
                VAR_3 = 0
            END
        ELSE
            VAR_3 = 0
        END
    END
ELSE
    IF IS_PLAYER_PLAYING player1
    THEN
        GET_PAD_STATE 0 LEFTSTICKX STORE_TO TEMP_1
        GET_PAD_STATE 0 LEFTSTICKY STORE_TO TEMP_2
        
        IF IS_PC_USING_JOYPAD
        THEN
            IF IS_BUTTON_PRESSED PAD1 DPADLEFT
            THEN
                TEMP_1 = -128
            END
            IF IS_BUTTON_PRESSED PAD1 DPADRIGHT
            THEN
                TEMP_1 = 128
            END
            IF IS_BUTTON_PRESSED PAD1 DPADUP
            THEN
                TEMP_2 = -128
            END
            IF IS_BUTTON_PRESSED PAD1 DPADDOWN
            THEN
                TEMP_2 = 128
            END
        END
        
        GET_VAR_POINTER gSaveSafeDrugQtyBegin TEMP_3
        GET_VAR_POINTER gSaveDrugQtyBegin TEMP_4
        
        IF NOT TEMP_1 == 0
        THEN
            IF VAR_6 == 0
            THEN
                IF TEMP_1 > 64
                THEN
                    VAR_5 += 1
                    VAR_6 = 1
                END
                IF TEMP_1 < -64
                THEN
                    VAR_5 -= 1
                    VAR_6 = 1
                END
                IF VAR_5 > MAX_DRUG
                THEN
                    VAR_5 = MIN_DRUG
                END
                IF VAR_5 < MIN_DRUG
                THEN
                    VAR_5 = MAX_DRUG
                END
            END
        ELSE
            IF VAR_6 == 1
            THEN
                VAR_6 = 0
            END
        END
        
        IF IS_BUTTON_PRESSED PAD1 CROSS
        THEN
            IF VAR_6 == 0
            THEN
                IF 0019:   TEMP_4(VAR_5,4s) > 0
                THEN
                    005A: TEMP_3(VAR_5,4s) += TEMP_4(VAR_5,4s)
                    0006: TEMP_4(VAR_5,4s) = 0
                    TEMP_2 = 0
                END
                VAR_6 = CROSS
            END
        ELSE
            IF VAR_6 == CROSS
            THEN
                VAR_6 = 0
            END
        END
        IF IS_BUTTON_PRESSED PAD1 SQUARE
        THEN
            IF VAR_6 == 0
            THEN
                IF 0019:   TEMP_3(VAR_5,4s) > 0
                THEN
                    005A: TEMP_4(VAR_5,4s) += TEMP_3(VAR_5,4s)
                    0006: TEMP_3(VAR_5,4s) = 0
                    TEMP_2 = 0
                END
                VAR_6 = SQUARE
            END
        ELSE
            IF VAR_6 == SQUARE
            THEN
                VAR_6 = 0
            END
        END
        
        IF NOT TEMP_2 == 0
        THEN
            IF VAR_6 == 0
            THEN
                IF TEMP_2 > 64
                THEN
                    IF 0019:   TEMP_3(VAR_5,4s) > 0
                    THEN
                        000E: TEMP_3(VAR_5,4s) -= 1
                        000A: TEMP_4(VAR_5,4s) += 1
                    END
                    VAR_6 = 2
                END
                IF TEMP_2 < -64
                THEN
                    IF 0019:   TEMP_4(VAR_5,4s) > 0
                    THEN
                        000E: TEMP_4(VAR_5,4s) -= 1
                        000A: TEMP_3(VAR_5,4s) += 1
                    END
                    VAR_6 = 2
                END
            END
        ELSE
            IF VAR_6 == 2
            THEN
                VAR_6 = 0
            END
        END
        
        CALL @DrawStashBox 0
        CALL @DrawDrugRow 5 TEMP_3 120.0 180.0 64.0 VAR_5
        
        CALL @DrawPocketBox 0
        CALL @DrawDrugRow 5 TEMP_4 120.0 320.0 64.0 VAR_5
        
        GET_LABEL_POINTER @TempMemory TEMP_1
        STRING_FORMAT TEMP_1 "~GO_LEFT~ ~GO_RIGHT~ select drug.~N~~k~~GO_FORWARD~ ~k~~GO_BACKWARD~ add/take drug."
        SET_TEXT_FONT 2
        SET_TEXT_EDGE ON 0 0 0 255
        SET_TEXT_SIZE 320.0
        SET_TEXT_PROPORTIONAL TRUE
        CALL @DisplayText 3 50.0 390.0 TEMP_1
        STRING_FORMAT TEMP_1 "~k~~PED_SPRINT~ add all.~N~~k~~PED_JUMPING~ take all.~N~~k~~VEHICLE_ENTER_EXIT~ exit."
        SET_TEXT_FONT 2
        SET_TEXT_EDGE ON 0 0 0 255
        SET_TEXT_RIGHT_JUSTIFY 1
        SET_TEXT_SIZE 640.0
        SET_TEXT_PROPORTIONAL TRUE
        CALL @DisplayText 3 590.0 390.0 TEMP_1
        
        IF IS_BUTTON_PRESSED PAD1 TRIANGLE
        THEN
            IF VAR_6 == 0
            THEN
                VAR_6 = TRIANGLE
            END
        ELSE
            IF VAR_6 == TRIANGLE
            THEN
                VAR_6 = 0
                GOSUB @System_SafeHouse_ExitStashDialog
            END
        END
    ELSE
        GOSUB @System_SafeHouse_ExitStashDialog
    END
END
RETURN

:System_SafeHouse_ExitStashDialog
VAR_3 = 0
SET_PLAYER_CONTROL player1 ON
DISPLAY_RADAR TRUE
RETURN

:DrawDrugRow{\__(pDrugQtyArray,_fXPos,_fYPos,_fScale,_nSelectedDrug)__}
FOR 5@ = MIN_DRUG TO MAX_DRUG
    6@ = 130
    0A8E: 7@ = 5@ + 1
    IF 8019:   NOT 0@(5@,4s) > 0
    THEN
        7@ += MAX_DRUG
        7@ += 1
    END
    IF 003B:   4@ == 5@
    THEN 6@ = 255
    END
    SET_SPRITES_DRAW_BEFORE_FADE TRUE
    DRAW_SPRITE 7@ 1@ 2@ 3@ 3@ 255 255 255 6@
    IF 0019:   0@(5@,4s) > 0
    THEN
        0087: 8@ = 1@
        0087: 9@ = 2@
        8@ -= 16.0
        9@ += 20.0
        DRAW_SPRITE 13 8@ 9@ 20.0 20.0 200 200 200 255
        8@ -= 5.0
        9@ -= 6.0
        SET_TEXT_FONT 1
        SET_TEXT_EDGE ON 0 0 0 255
        DISPLAY_TEXT_WITH_NUMBER 8@ 9@ "NUMBER" 0@(5@,4s)
    END
    005B: 1@ += 3@
    1@ += 16.0
END
RET 0

:DrawStashBox
SET_SPRITES_DRAW_BEFORE_FADE TRUE
DRAW_RECT_WITH_TITLE 40.0 120.0 600.0 240.0 "_BMSHD" 0
RET 0

:DrawPocketBox
SET_SPRITES_DRAW_BEFORE_FADE TRUE
DRAW_RECT_WITH_TITLE 40.0 260.0 600.0 380.0 "_BMPKT" 0
RET 0

:System_Save
// 1@  - Save Slot
GET_LABEL_POINTER @TempMemory 2@
STRING_FORMAT 2@ "cleo\BlackMarket\save\save%d.bms" 1@
IF OPEN_FILE 2@ "w+" 3@
THEN
    0085: SaveDataIndex = gSaveDataPointer
    4@ = VERSION_LONG
    WRITE_TO_FILE 3@ 4 4@
    0A90: 5@ = 4 * NUM_SAVE_VARS
    WRITE_TO_FILE 3@ 5@ gSaveDataBegin
    CLOSE_FILE 3@
    
    PRINTINT2 "BMM_SAVED" 1@
END
RET 0

:System_Load
// 1@ - Load Slot
GET_LABEL_POINTER @TempMemory 2@
STRING_FORMAT 2@ "cleo\BlackMarket\save\save%d.bms" 1@
IF OPEN_FILE 2@ "r" 3@
THEN
    READ_FROM_FILE 3@ 4 4@
    GET_FILE_SIZE 3@ 4@
    4@ -= 4
    0A90: 5@ = 4 * NUM_SAVE_VARS
    IF 003B:   4@ == 5@
    THEN
        0085: SaveDataIndex = gSaveDataPointer
        GET_VAR_POINTER gSaveDataBegin 4@
        WHILE IS_END_OF_FILE_REACHED 3@
            READ_FROM_FILE 3@ 4 6@
            WRITE_MEMORY 4@ 4 6@ 0
            4@ += 4
        END
    ELSE
        PRINTSTRING "BMM_SAVE_FILE_INCOMPATIBLE"
    END
    CLOSE_FILE 3@
    
    PRINTINT2 "BMM_LOADED_SAVE" 1@
END
RET 0

:Market                 // Processes the live market
HEX
0100 01 @InitProc
END
{$I market.txt}
RET 0

:DealerHook             // Hooks the DEALER script
HEX
0800 01 @InitProc
END
{
    VAR_1       (INT)           Selected Scoring Item Index
    VAR_2       (INT)           Direction Button Used
    VAR_3       (INT)           Button Down
    VAR_4       (ARRAY INT)     Scoring Quantities (sizeof: MAX_DRUG)
}
IF IS_PLAYER_PLAYING player1
THEN
    GET_NUMBER_OF_SCRIPT_INSTANCES_OF_STREAMED_SCRIPT SCRIPT_DEALER STORE_TO TEMP_1
    IF NOT TEMP_1 == 0
    THEN
        GOSUB @DealerHook_Hook
    END
END
{0006: gNumProcVars = 2
000A: gNumProcVars += MAX_DRUG}
GOTO @DealerHook_End

:DealerHook_Hook
GET_LABEL_POINTER @TempMemory TEMP_2
IF timera > 1000
THEN
    STRING_FORMAT TEMP_2 "dealer"
    IF CALL @CTheScripts__GetNextActiveScriptNamed 2 1 TEMP_2 >> TEMP_1
    THEN
        WHILE TRUE
            0085: TEMP_3 = gCurrentProcPointer
            0085: TEMP_1(-4@,4s) = TEMP_3(-4@,4s)
            GET_LABEL_POINTER @DEALER TEMP_1(-5@,4s)
            CALL @CTheScripts__GetNextActiveScriptNamed 2 0 TEMP_2 TEMP_1
            ELSE_GOTO BREAK
        END
    END
    timera = 0
END
STRING_FORMAT TEMP_2 "bmdeal"
IF CALL @CTheScripts__GetNextActiveScriptNamed 2 1 TEMP_2 >> TEMP_1
THEN
    WHILE TRUE
        CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_DEAL2PLAYER TEMP_3
        IF NOT TEMP_3 == 0
        THEN
            CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_CHAR TEMP_2
            IF NOT IS_CHAR_DEAD TEMP_2
            THEN
                GOSUB @DealerHook_DoDeal
            END
            GET_LABEL_POINTER @TempMemory TEMP_2
            STRING_FORMAT TEMP_2 "bmdeal"
        END
        CALL @CTheScripts__GetNextActiveScriptNamed 2 0 TEMP_2 TEMP_1
        ELSE_GOTO BREAK
    END
END
RETURN

:DealerHook_DoDeal
IF TEMP_3 == 2
THEN
    GET_PAD_STATE 0 LEFTSTICKX STORE_TO TEMP_2
    GET_PAD_STATE 0 LEFTSTICKY STORE_TO TEMP_3
    
    IF IS_PC_USING_JOYPAD
    THEN
        IF IS_BUTTON_PRESSED 0 DPADLEFT
        THEN
            TEMP_2 = -128
        END
        IF IS_BUTTON_PRESSED 0 DPADRIGHT
        THEN
            TEMP_2 = 128
        END
        IF IS_BUTTON_PRESSED 0 DPADUP
        THEN
            TEMP_3 = -128
        END
        IF IS_BUTTON_PRESSED 0 DPADDOWN
        THEN
            TEMP_3 = 128
        END
    END
    
    CALL @GetDealerScriptTotalDrugQuantity 1 TEMP_1 TEMP_4
    
    IF AND
        TEMP_4 > 0
        VAR_2 == 0
    THEN
        IF TEMP_2 > 64
        THEN
            REPEAT
                IF VAR_1 >= MAX_DRUG
                THEN VAR_1 = 0
                ELSE VAR_1 += 1
                END
                CALL @GetDealerScriptDrugQuantity 2 TEMP_1 VAR_1 TEMP_4
            UNTIL TEMP_4 > 0
            VAR_2 = 1
        END
        IF TEMP_2 < -64
        THEN
            REPEAT
                IF VAR_1 <= 0
                THEN VAR_1 = MAX_DRUG
                ELSE VAR_1 -= 1
                END
                CALL @GetDealerScriptDrugQuantity 2 TEMP_1 VAR_1 TEMP_4
            UNTIL TEMP_4 > 0
            VAR_2 = 2
        END
        
        CALL @GetDealerScriptDrugQuantity 2 TEMP_1 VAR_1 TEMP_4
        0062: TEMP_4 -= VAR_4(VAR_1,6i)
        
        IF 0019:   VAR_4(VAR_1,6i) > 0
        THEN
            IF TEMP_3 > 64
            THEN
                000E: VAR_4(VAR_1,6i) -= 1
                VAR_2 = 3
            END
        END
        IF TEMP_4 > 0
        THEN
            IF TEMP_3 < -64
            THEN
                000A: VAR_4(VAR_1,6i) += 1
                VAR_2 = 3
            END
        END
    ELSE
        IF NOT VAR_2 == 3
        THEN
            IF NOT VAR_2 == 0
            THEN
                IF AND
                    TEMP_2 > -64
                    TEMP_2 < 64
                THEN
                    VAR_2 = 0
                END
            END
        ELSE
            IF AND
                TEMP_3 > -64
                TEMP_3 < 64
            THEN
                VAR_2 = 0
            END
        END
    END
END

TEMP_7 = 0

FOR TEMP_2 = MIN_DRUG TO MAX_DRUG
    CALL @GetDealerScriptDrugQuantity 2 TEMP_1 TEMP_2 TEMP_3
    
    IF TEMP_3 > 0
    THEN 0A8E: TEMP_4 = TEMP_2 + 1
    ELSE
        IF 003B:   VAR_1 == TEMP_2
        THEN
            IF VAR_2 == 2
            THEN VAR_1 -= 1
            ELSE VAR_1 += 1
            END
        END
        0A8E: TEMP_4 = TEMP_2 + 7
    END
    
    0093: TEMP_5 = integer TEMP_2 to_float
    TEMP_5 *= 80.0
    TEMP_5 += 120.0
    
    IF 003B:   VAR_1 == TEMP_2
    THEN TEMP_6 = 255
    ELSE TEMP_6 = 140
    END
    
    SET_SPRITES_DRAW_BEFORE_FADE TRUE
    DRAW_SPRITE TEMP_4 TEMP_5 394.0 64.0 64.0 255 255 255 TEMP_6
    
    IF TEMP_3 > 0
    THEN
        TEMP_5 -= 16.0
        SET_SPRITES_DRAW_BEFORE_FADE TRUE
        DRAW_SPRITE 13 TEMP_5 414.0 20.0 20.0 200 200 200 255
        TEMP_5 -= 5.0
        SET_TEXT_FONT 1
        SET_TEXT_EDGE ON 0 0 0 255
        0A8F: TEMP_4 = TEMP_3 - VAR_4(TEMP_2,6i)
        DISPLAY_TEXT_WITH_NUMBER TEMP_5 408.0 "NUMBER" TEMP_4
    END
    
    IF 001B:   0 > VAR_4(TEMP_2,6i)
    THEN
        0006: VAR_4(TEMP_2,6i) = 0
    END
    IF 001D:   VAR_4(TEMP_2,6i) > TEMP_5
    THEN
        0085: VAR_4(TEMP_2,6i) = TEMP_5
    END
    
    IF 003B:   VAR_1 == TEMP_2
    THEN
        IF IS_BIT_SET_L gSaveBools SBOOLS_bDrugBuyTutDone
        THEN            
            GET_LABEL_POINTER @TempMemory TEMP_4
            CALL @GetDrugName 1 TEMP_2 TEMP_5
            CALL @GetDrugPrice 1 TEMP_2 TEMP_6
            STRING_FORMAT TEMP_4 "%s~n~Price: $%d" TEMP_5 TEMP_6
            CALL_FUNCTION 0x588BE0 4 4 0 1 0 TEMP_4
        END
    END
    
    IF 0019:   VAR_4(TEMP_2,6i) > 0
    THEN
        0093: TEMP_4 = integer TEMP_7 to_float
        TEMP_4 *= 12.0
        TEMP_4 += 140.0
        
        SET_TEXT_FONT 1
        SET_TEXT_RIGHT_JUSTIFY TRUE
        SET_TEXT_EDGE ON 0 0 0 255
        
        GET_LABEL_POINTER @DRUG_NAME_QTY TEMP_5
        DISPLAY_TEXT_WITH_NUMBER 600.0 TEMP_4 TEMP_5(TEMP_2,8s) VAR_4(TEMP_2,6i)
        
        TEMP_7 += 1
    END
END

TEMP_2 = 0

FOR TEMP_3 = MIN_DRUG TO MAX_DRUG
    0085: TEMP_4 = VAR_4(TEMP_3,6i)
    IF TEMP_4 > 0
    THEN
        CALL @GetDrugPrice 1 TEMP_3 TEMP_5
        006A: TEMP_4 *= TEMP_5
        005A: TEMP_2 += TEMP_4
    END
END

0085: TEMP_3 = TEMP_7
0093: TEMP_3 = integer TEMP_3 to_float
TEMP_3 *= 12.0
TEMP_3 += 144.0

SET_TEXT_FONT 1
SET_TEXT_RIGHT_JUSTIFY TRUE
SET_TEXT_EDGE ON 0 0 0 255
DISPLAY_TEXT_WITH_NUMBER 600.0 TEMP_3 "_BMTOT" TEMP_2

IF IS_BUTTON_PRESSED PAD1 TRIANGLE
THEN VAR_3 = 1
ELSE
    IF VAR_3 == 1
    THEN
        VAR_3 = 0
        
        // Tell DEALER script to finish.
        CALL @CRunningScript__SetVar 3 TEMP_1 DEALER_VAR_DEAL2PLAYER 4
    END
END

IF IS_BUTTON_PRESSED PAD1 CROSS
THEN VAR_3 = 2
ELSE
    IF VAR_3 == 2
    THEN
        // Check we've actually got some drugs to buy and can afford em...
        TEMP_2 = 0
        TEMP_3 = 0
        FOR TEMP_4 = MIN_DRUG TO MAX_DRUG
            0085: TEMP_5 = VAR_4(TEMP_4,6i)
            IF TEMP_5 > 0
            THEN
                005A: TEMP_2 += TEMP_5
                CALL @GetDrugPrice 1 TEMP_4 TEMP_6
                006A: TEMP_6 *= TEMP_5
                005A: TEMP_3 += TEMP_6
            END
        END
        IF TEMP_2 > 0
        THEN
            0A8F: TEMP_4 = TEMP_3 - 1
            IF IS_SCORE_GREATER 0 TEMP_4
            THEN
                CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_MONEY >> TEMP_5
                005A: TEMP_5 += TEMP_3
                CALL @CRunningScript__GetVar 2 TEMP_1 DEALER_VAR_CHAR >> TEMP_6
                SET_CHAR_MONEY TEMP_6 TEMP_5
                CALL @CRunningScript__SetVar 3 TEMP_1 DEALER_VAR_MONEY TEMP_5
                
                GET_VAR_POINTER VAR_4 TEMP_5
                CALL @StartTransaction 0 TEMP_6
                
                0085: TEMP_6(CTransaction_iCash,4s) = TEMP_3
                
                FOR TEMP_4 = MIN_DRUG TO MAX_DRUG
                    0085: TEMP_5 = VAR_4(TEMP_4,6i)
                    0A8E: TEMP_7 = TEMP_4 + CTransaction_DrugQty
                    IF TEMP_5 > 0
                    THEN
                        CALL @TakeDrugsFromDealerScript 3 TEMP_1 TEMP_4 TEMP_5
                        0085: TEMP_6(TEMP_7,4s) = TEMP_5
                    ELSE
                        0006: TEMP_6(TEMP_7,4s) = 0
                    END
                    0006: VAR_4(TEMP_4,6i) = 0
                END
                
                CALL @CRunningScript__SetVar 3 TEMP_1 DEALER_VAR_DEAL2PLAYER 3
            ELSE
                PRINT_STRING_NOW "You do not have enough cash." 4000
            END
        ELSE
            PRINT_STRING_NOW  "You have not chosen any drugs." 4000
        END
        VAR_3 = 0
    END
END
RETURN

:DealerHook_End
GOSUB @EndProc
RET 0

:FIENDS
HEX
0800 01 @InitProc
END
{$I fiends.txt}
GOSUB @EndProc
RET 0

{$I dealer.txt}

:End
hex
0000 01 @InitProc
end
READ_MEMORY 0xB610E0 4 0 gDebugEndTime
RET 0

:InitProc
WRITE_MEMORY gCurrentProcData 2 gNumProcVars 0
GET_VAR_POINTER 0@ gStartVarPointer
0085: SaveVar = gSaveDataPointer

IF 0019:   gNumProcVars > 0
THEN
    0085: TEMP_1 = gStackPointer
    READ_MEMORY 0xB7CB58 4 0 TEMP_2
    TEMP_2 *= 20.0
    0092: TEMP_2 = float TEMP_2 to_integer
    
    0085: TEMP_3 = gStartVarPointer
    0085: TEMP_3(-32@,4s) = TEMP_1(TEMP_1,4s)
    005A: TEMP_3(-32@,4s) += TEMP_2
    0085: TEMP_3(-33@,4s) = TEMP_1(-1@,4s)
    005A: TEMP_3(-33@,4s) += TEMP_2
    TEMP_1 += 8
    
    0A8E: TEMP_2 = gNumProcVars + VAR_START_NUM

    FOR TEMP_4 = VAR_START_NUM TO TEMP_2
        0085: TEMP_3(TEMP_4,4s) = TEMP_1(TEMP_1,4s)
        TEMP_1 += 4
    END
END
RETURN

:ResetVars
0A8E: TEMP_1 = gNumProcVars + VAR_START_NUM
0085: TEMP_2 = gStartVarPointer
0006: TEMP_2(-32@,4s) = 0
0006: TEMP_2(-33@,4s) = 0
FOR TEMP_3 = VAR_START_NUM TO TEMP_1
    0006: TEMP_2(TEMP_3,4s) = 0
END
RETURN

:EndProc
0085: TEMP_3 = gStartVarPointer
0085: TEMP_4 = gStackPointer
0085: TEMP_4(TEMP_4,4s) = TEMP_3(-32@,4s)
0085: TEMP_4(-1@,4s) = TEMP_3(-33@,4s)
TEMP_4 += 8
0A8E: TEMP_2 = gNumProcVars + VAR_START_NUM
FOR TEMP_5 = VAR_START_NUM TO TEMP_2
    0085: TEMP_4(TEMP_4,4s) = TEMP_3(TEMP_5,4s)
    TEMP_4 += 4
END
0085: gStackPointer = TEMP_4
RETURN

:GetSaveVarIndex
GOSUB @GetGlobalVarIndex
0085: SaveVar = gSaveDataPointer
RETURN

:GetGlobalVarIndex
SET_BIT_L 38@ 8
SVar = @GLOBAL_VARIABLES_INDEX
0085: SVar = SVar(SVar,4s)
RETURN

:LoadScoreTextures
LOAD_TEXTURE_DICTIONARY "BMM"
LOAD_SPRITE 1  "drug1"
LOAD_SPRITE 2  "drug2"
LOAD_SPRITE 3  "drug3"
LOAD_SPRITE 4  "drug4"
LOAD_SPRITE 5  "drug5"
LOAD_SPRITE 6  "drug6"
LOAD_SPRITE 7  "nodrug1"
LOAD_SPRITE 8  "nodrug2"
LOAD_SPRITE 9  "nodrug3"
LOAD_SPRITE 10 "nodrug4"
LOAD_SPRITE 11 "nodrug5"
LOAD_SPRITE 12 "nodrug6"
LOAD_SPRITE 13 "redcirc"
RETURN

{BEGIN 'STDLIB'}


{END 'STDLIB'}

{}:DisplayText_MEM
HEX
0000000000000000
END

:DisplayText{\__(x,_y,_pStr)__}
NOT 2@ == 0
ELSE_GOTO @DisplayText_END
0085: 3@ = 0@
0085: 4@ = 1@
GOSUB @GetGlobalVarIndex
31@ = @DisplayText_MEM
803C:   NOT gNumCycles == 31@(31@,4s)
ELSE_GOTO @DisplayText_1
0085: 31@(31@,4s) = gNumCycles
0006: 31@(-1@,4s) = 0
{}:DisplayText_1
STRING_FORMAT 5@v "__TMP%X" 31@(-1@,4s)
ADD_TEXT_LABEL 5@v 2@
DISPLAY_TEXT 3@ 4@ 5@v
31@(-1@,4s) += 1
{}:DisplayText_END
RET 0

:GenerateDrugPrices
1@ = FPRICE_WEED
2@ = FPRICE_COKE
3@ = FPRICE_HEROIN
4@ = FPRICE_ECSTASY
5@ = FPRICE_STEROID
6@ = FPRICE_SHROOM
FOR 7@ = MIN_DRUG TO MAX_DRUG
    CALL @GenerateDrugPriceMultiplier 0 0@
    006B: 1@(7@,MAX_DRUGf) *= 0@
    0092: 1@(7@,MAX_DRUGi) = float_to_int 1@(7@,MAX_DRUGf)
    CALL @SetDrugPrice 2 7@ 1@(7@,6i)
END
RET 0

:GenerateDrugValues
1@ = FPRICE_WEED
2@ = FPRICE_COKE
3@ = FPRICE_HEROIN
4@ = FPRICE_ECSTASY
5@ = FPRICE_STEROID
6@ = FPRICE_SHROOM
FOR 7@ = MIN_DRUG TO MAX_DRUG
    CALL @GenerateDrugValueMultiplier 0 0@
    006B: 1@(7@,MAX_DRUGf) *= 0@
    0092: 1@(7@,MAX_DRUGi) = float_to_int 1@(7@,MAX_DRUGf)
    CALL @SetDrugValue 2 7@ 1@(7@,MAX_DRUGi)
END
RET 0

:GetDrugPrice
1@ = @DRUG_PRICES
RET 1 1@(0@,4s)

:GetDrugValue
1@ = @DRUG_VALUES
RET 1 1@(0@,4s)

:SetDrugPrice
2@ = @DRUG_PRICES
0085: 2@(0@,4s) = 1@
RET 0

:SetDrugValue
2@ = @DRUG_VALUES
0085: 2@(0@,4s) = 1@
RET 0

:GetDrugName
1@ = @DRUG_NAMES
GET_VAR_POINTER 1@(0@,10s) 2@
RET 1 2@

:GenerateDrugPriceMultiplier
0@ = 1.0 
GET_TOTAL_RESPECT 1@
IF 1@ > 7
THEN
    1@ = 7
ELSE
    IF 1@ < 0
    THEN 1@ = 0
    END
END
0093: 1@ = integer 1@ to_float
1@ /= 7.0
1@ -= 0.5
1@ *= 0.2
0063: 0@ -= 1@
GENERATE_RANDOM_FLOAT 1@
1@ -= 0.5
1@ /= 5.0
0063: 0@ -= 1@
RET 1 0@

:GenerateDrugValueMultiplier
0@ = 1.0
GET_TOTAL_RESPECT 1@
IF 1@ > 7
THEN
    1@ = 7
ELSE
    IF 1@ < 0
    THEN 1@ = 0
    END
END
0093: 1@ = int_to_float 1@
1@ /= 7.0
1@ -= 0.5
1@ *= 0.2
005B: 0@ += 1@
GENERATE_RANDOM_FLOAT 1@
1@ -= 0.5
1@ /= 5.0
005B: 0@ += 1@
RET 1 0@

:GetSupplyDemandRatio
GOSUB @GetSaveVarIndex
0087: 3@ = gSaveDemand
0073: 3@ /= gSaveSupply
IF 3@ > 2.0
THEN 3@ = 2.0
ELSE
    IF 3@ < 0.5
    THEN 3@ = 0.5
    END
END
RET 1 3@

{}:Transaction_MEM
0000:
0000:

:StartTransaction{\__[pTransactionData]__}
// Constructor?
0A90: 0@ = MAX_DRUG * 4
0@ += 12
IF NOT ALLOCATE_MEMORY 0@ 1@
THEN
    1@ = @TempMemory
END
GET_VAR_POINTER 1@(1@,4s) 2@
WRITE_MEMORY 2@ 0@ 0 0
GET_GAME_TIMER 1@(CTransaction_iTime,4s)
2@ = @Transaction_MEM
0085: 2@(2@,4s) = 1@
RET 1 1@

{:AnimateTransaction
0@ = @Transaction_MEM
0085: 0@ = 0@(0@,4s)
RET 0}

:FinishTransaction
GOSUB @GetSaveVarIndex
5@ = @Transaction_MEM
0085: 1@ = 5@(5@,4s)
IF NOT 1@ == 0
THEN
    0093: 2@ = int_to_float 1@(CTransaction_iCash,4s)
    INCREMENT_FLOAT_STAT STAT_DRUGS_BUDGET 2@
    0A90: 2@ = 1@(1@,4s) * -1
    ADD_SCORE player1 2@
    GET_VAR_POINTER gSaveDrugQtyBegin 3@
    7@ = 0
    FOR 4@ = MIN_DRUG TO MAX_DRUG
        0A8E: 6@ = 4@ + CTransaction_DrugQty
        005A: 7@ += 1@(6@,4s)
        PRINTINT2 "BOUGHT" 1@(6@,4s)
        005A: 3@(4@,4s) += 1@(6@,4s)
    END
    INCREMENT_INT_STAT STAT_DRUGS_BOUGHT 7@
    000A: gSaveNumDealsDone += 1
    IF 1@ > 0
    THEN
        FREE_MEMORY 1@
    END
    0006: 5@(5@,4s) = 0
END
RET 0

:GetTotalSafeDrugQuantity{\__[nQty]__}
GOSUB @GetSaveVarIndex
GET_VAR_POINTER gSaveSafeDrugQtyBegin 1@
FOR 2@ = MIN_DRUG TO MAX_DRUG
    005A: 3@ += 1@(2@,4s)
END
RET 1 3@

:GetDrugQuantity{\__[nQty]__(nDrug)__}
IF AND
    0@ <= MAX_DRUG
    0@ >= MIN_DRUG
THEN
    0085: 1@ = 0@
    GOSUB @GetSaveVarIndex
    GET_VAR_POINTER gSaveDrugQtyBegin 2@
    RET 1 2@(1@,4s)
END
RET 1 -1

:GetTotalDrugQuantity{\__[nQty]__}
GOSUB @GetSaveVarIndex
GET_VAR_POINTER gSaveDrugQtyBegin 1@
FOR 2@ = MIN_DRUG TO MAX_DRUG
    005A: 3@ += 1@(2@,4s)
END
RET 1 3@

:GiveDrugsToDealerScript{\__(pScript,_nDrug,_nQty)__}
CALL @GetDealerScriptDrugQuantity 2 0@ 1@ 3@
005A: 3@ += 2@
CALL @SetDealerScriptDrugQuantity 3 0@ 1@ 3@
RET 0

:TakeDrugsFromDealerScript{\__(pScript,_nDrug,_nQty)__}
CALL @GetDealerScriptDrugQuantity 2 0@ 1@ 3@
0062: 3@ -= 2@
IF 3@ < 0
THEN 3@ = 0
END
CALL @SetDealerScriptDrugQuantity 3 0@ 1@ 3@
RET 0

:SetDealerScriptDrugQuantity{\__(pScript,_nDrug,_nQty)__}
1@ += DEALER_VAR_NUMWEED
IF 2@ >= 10
THEN 2@ = 9
END
CALL @CRunningScript__SetVar 3 0@ 1@ 2@
RET 0

:GetDealerScriptDrugQuantity{\__(pScript,_nDrug)__}
1@ += DEALER_VAR_NUMWEED
CALL @CRunningScript__GetVar 2 0@ 1@ 2@
RET 1 2@

:GetDealerScriptTotalDrugQuantity{\__(pScript)__}
3@ = 0
FOR 1@ = MIN_DRUG TO MAX_DRUG
    CALL @GetDealerScriptDrugQuantity 2 0@ 1@ 2@
    005A: 3@ += 2@
END
RET 1 3@

:GetRandomDrugForPed{\__[nDrug]_(hPed)__}
CALL @GetDrugsMaskForPed 1 0@ 1@
BITWISE_AND 1@ DRUG_FLAG_WEED 2@
BITWISE_AND 1@ DRUG_FLAG_COKE 3@
BITWISE_AND 1@ DRUG_FLAG_HEROIN 4@
BITWISE_AND 1@ DRUG_FLAG_ECSTASY 5@
BITWISE_AND 1@ DRUG_FLAG_STEROID 6@
BITWISE_AND 1@ DRUG_FLAG_SHROOM 7@
GENERATE_RANDOM_INT_IN_RANGE MIN_DRUG MAX_DRUG 8@
FOR 9@ = MIN_DRUG TO MAX_DRUG
    IF 2@(8@,MAX_DRUGi) > 0
    THEN RET 1 8@
    END
    8@ += 1
    IF 8@ > MAX_DRUG
    THEN 8@ = MIN_DRUG
    END
END
RETURN_FALSE
RET 1 0

:GetDrugsMaskForPed{\__[bDrugsMask]_(hPed)__}
GET_CHAR_MODEL 0@ 1@
GOSUB @GetGlobalVarIndex
0085: 2@ = gNumPedDrugInfoEntries
0085: 3@ = gPedDrugInfo
FOR 4@ = 0 TO 2@
    READ_MEMORY 3@ 2 OFF 5@
    IF 003B:   5@ == 1@
    THEN
        3@ += 2
        READ_MEMORY 3@ 1 OFF 5@
        RET 1 5@
    END
    3@ += 3
END
RETURN_FALSE
RET 1 0

:strncmp{\__[bool]__(str1,_str2,_size)__}
GET_LABEL_POINTER @FUNC_stncmp 3@
CALL_FUNCTION_RETURN 3@ 3 3 2@ 1@ 0@ 4@
4@ == 0
RET 0

{}:FUNC_stncmp
HEX
55                         // push ebp
8b ec                      // mov ebp,esp
57                         // push edi
56                         // push esi
53                         // push ebx
8b 4d 10                   // mov ecx,[ebp+10]
e3 27                      // jecxz 00821502
8b d9                      // mov ebx,ecx
8b 7d 08                   // mov edi,[ebp+08]
8b f7                      // mov esi,edi
33 c0                      // xor eax,eax
f2 ae                      // repne scasb
f7 d9                      // neg ecx
03 cb                      // add ecx,ebx
8b fe                      // mov edi,esi
8b 75 0c                   // mov esi,[ebp+0c]
f3 a6                      // repe cmpsb
8a 46 ff                   // mov al,[esi-01]
33 c9                      // xor ecx,ecx
3a 47 ff                   // cmp al,[edi-01]
77 05                      // ja 00821500
74 05                      // je 00821502
83 e9 02                   // sub ecx,02
f7 d1                      // not ecx
8b c1                      // mov eax,ecx
5b                         // pop ebx
5e                         // pop esi
5f                         // pop edi
c9                         // leave
c3                         // ret
END

:GetModelInfo
1@ = 0xA9B0C8
RET 1 1@(0@,4s)

{}:CTheScripts__GetNextActiveScript_MEM
HEX
0000000000000000
END

:CTheScripts__GetNextActiveScript{\__[pScript]_(bStartNewSearch)__}
31@ = @CTheScripts__GetNextActiveScript_MEM
IF 0@ == 0
THEN
    NOT 31@(31@,4s) == 0
    ELSE_GOTO @CTheScripts__GetNextActiveScript_END
    0085: 1@ = 31@(31@,4s)
ELSE
    1@ = 0xA8B42C
    0085: 1@ = 1@(1@,4s)
END
0085: 31@(31@,4s) = 1@(1@,4s)
NOT 1@(1@,4s) == 0
{}:CTheScripts__GetNextActiveScript_END
RET 1 1@

:CTheScripts__GetNextActiveScriptNamed{\__[pScript]_(bStartNewSearch,_pName)__}
REPEAT
    CALL @CTheScripts__GetNextActiveScript 1 0@ 2@
    ELSE_GOTO BREAK
    NOT 2@ == 0
    ELSE_GOTO BREAK
    0@ = 0
    0A8E: 3@ = 2@ + 8
UNTIL CALL @strncmp 3 1@ 3@ 8
RET 1 2@

:CRunningScript__IsScriptBrain{\__[bool]_(pScript)__}
0@ += 0xC7
READ_MEMORY 0@ 1 0 0@
NOT 0@ == 0
RET 0

:CRunningScript__GetVar{\__[iValue]_(pScript,iVarNum)__}
0@ += 0x3C
RET 1 0@(1@,4s)

:CRunningScript__SetVar{\__(pScript,iVarNum,iValue)__}
0@ += 0x3C
0085: 0@(1@,4s) = 2@
RET 0

{}:DRUG_PRICES
HEX
00000000 00000000 00000000 00000000 00000000 00000000 0000000 00000000
END

{}:DRUG_VALUES
HEX
00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000
END

{}:DRUG_NAMES
HEX
// Aliases?
{"Gringo"   00000000
"Whities"    000000
"Brownies"     0000
"Chirps"   00000000
"Ronnies"    000000
"Shrewds"    000000}
"Weed" 000000000000
"Coke" 000000000000
"Heroin"   00000000
"Ecstasy"    000000
"Steroids"     0000
"Shrooms"    000000
END

{}:DRUG_NAME_QTY
HEX
"_BMDQ0" 0000
"_BMDQ1" 0000
"_BMDQ2" 0000
"_BMDQ3" 0000
"_BMDQ4" 0000
"_BMDQ5" 0000
END

{}:_STATMAX
0000:
0000:

{}:_STATDATA
HEX
3D00 03 01 00 00
D900 00 01 00 00
DA00 00 01 00 00
9DFF 00 00 00 00
END

{}:_STATGETASM
HEX
BB 00 00 00 00      // mov ebx, {_STATDATA}
B8 D0 A7 55 00      // mov eax, {return}
FF E0               // jmp eax
END

{}:_STATSWITCH
HEX
9A A7 55 00
A1 A7 55 00
A8 A7 55 00
AF A7 55 00
B6 A7 55 00
BD A7 55 00
C4 A7 55 00
CB A7 55 00
00 00 00 00
END

{}:TempMemory     // 64 bytes
HEX
 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000
END
{}:MoreMemory     // 68 bytes
HEX
 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000
 00000000
END
{}:EvenMoreMemory     // 128 bytes
HEX
 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000
END

{}:STACK  // 64 (256 bytes)
HEX
 0000000000000000000000000000000000000000000000000000000000000000   // 32
 0000000000000000000000000000000000000000000000000000000000000000   // 64
 0000000000000000000000000000000000000000000000000000000000000000   // 96
 0000000000000000000000000000000000000000000000000000000000000000   // 128
 0000000000000000000000000000000000000000000000000000000000000000   // 160
 0000000000000000000000000000000000000000000000000000000000000000   // 192
 0000000000000000000000000000000000000000000000000000000000000000   // 224
 0000000000000000000000000000000000000000000000000000000000000000   // 256
END

:GLOBAL_VARIABLES_INDEX
HEX
 00000000
// 020001
END

{:GLOBAL_VARIABLES  // 64 (256 bytes)
HEX
 0000000000000000000000000000000000000000000000000000000000000000   // 32
 0000000000000000000000000000000000000000000000000000000000000000   // 64
 0000000000000000000000000000000000000000000000000000000000000000   // 96
 0000000000000000000000000000000000000000000000000000000000000000   // 128
 0000000000000000000000000000000000000000000000000000000000000000   // 160
 0000000000000000000000000000000000000000000000000000000000000000   // 192
 0000000000000000000000000000000000000000000000000000000000000000   // 224
 0000000000000000000000000000000000000000000000000000000000000000   // 256
END}